@page "/customerlist/edit/{Id:int?}"
@attribute [Authorize(Roles = "Manager, Cashier")]
@using FuelStation.Web.Client.Authentication;
@using FuelStation.Web.Shared.Customer;
@using FuelStation.Web.Shared;
@using System.Net.Http.Headers;
@using System.Net;
@using FuelStation.Web.Shared.Item;
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h3>@title</h3>

@if (Customer == null) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
	<EditForm Model="Customer" OnValidSubmit="OnSave">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row">
			<div class="col-md-6">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="@Customer.Name" />
				<ValidationMessage For="@(() => Customer.Name)" />
			</div>
		</div>

		<div class="row">

			<div class="col-md-6">
				<label class="form-label">Surname</label>
				<InputText class="form-control" @bind-Value="@Customer.Surname" />
				<ValidationMessage For="@(() => Customer.Surname)" />
			</div>
		</div>

		<div class="row">

			<div class="col-md-6">
				<label class="form-label">Card Number</label>
				<InputText class="form-control" @bind-Value="@Customer.CardNumber" />
				<ValidationMessage For="@(() => Customer.CardNumber)" />
			</div>
		</div>

		<div class="row mt-2">
			<div class="col">
				<button class="btn btn-success" type="submit">Save</button>
				<button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
			</div>
		</div>
	</EditForm>
}


@code {
	[Parameter] public int? Id { get; set; }
	CustomerEditDto Customer { get; set; }
	string? title;

	protected override async Task OnInitializedAsync() {
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!string.IsNullOrWhiteSpace(token)) {
			httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			if (Id == null) {
				Customer = new();
				title = "Create Customer";
			} else {
				Customer = await httpClient.GetFromJsonAsync<CustomerEditDto>($"customer/{Id}");
				title = "Edit Customer";
			}
		} else {
			navigationManager.NavigateTo("/login");
		}
	}
	private void OnCancel() {
		navigationManager.NavigateTo("customerlist");
	}

	private async Task OnSave() {
		HttpResponseMessage? response = null;

		if (Id == null) {
			response = await httpClient.PostAsJsonAsync("customer", Customer);
		} else {
			response = await httpClient.PutAsJsonAsync("customer", Customer);
		}

		if (response.IsSuccessStatusCode) {
			navigationManager.NavigateTo("customerlist");
		} else if (response.StatusCode == HttpStatusCode.BadRequest) {
			var errorResponse = await response.Content.ReadFromJsonAsync<CardNumberErrorResponse>();
			var errorMessage = errorResponse?.Error ?? "An error occurred";
			await jsRuntime.InvokeVoidAsync("alert", errorMessage);
		}
	}
}
