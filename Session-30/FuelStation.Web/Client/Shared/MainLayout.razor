@using FuelStation.Web.Client.Authentication;
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">
			<AuthorizeView>
				<Authorized>
					<NavLink class="nav-link" @onclick="Logout" href="javascript:void(0)">
						<div class="nav-item px-2">
							<span class="oi oi-account-logout" aria-hidden="true"></span> Sign Out
						</div>
					</NavLink>
					<NavLink class="nav-link" @onclick="DisplayGreetingAlert">
						<div class="nav-item px-2">
							<span class="oi oi-info" aria-hidden="true"></span> Info
						</div>
					</NavLink>
				</Authorized>
				<NotAuthorized>
					<NavLink class="nav-link" href="/login">
						<div class="nav-item px-2">
							<span class="oi oi-account-login" aria-hidden="true"></span> Sign In
						</div>
					</NavLink>
				</NotAuthorized>
			</AuthorizeView>
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>


@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	private async Task Logout() {
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(null);
		navigationManager.NavigateTo("/", true);
	}

	private async Task DisplayGreetingAlert() {
		var authState = await authenticationState;
		var message = $"You are Log In as {authState.User.Identity.Name} !";
		await jsRuntime.InvokeVoidAsync("alert", message);
	}
}